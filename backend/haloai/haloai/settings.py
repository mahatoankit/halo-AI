"""
Django settings for haloai project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import firebase_admin
from firebase_admin import credentials
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv(Path(__file__).resolve().parent.parent.parent.parent / ".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-me1%-d(#egr(sebkjx^1&c3$k%8^vp6pzy2#=dd@qq)t3_w4l*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["testserver", "127.0.0.1", "localhost"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Custom apps
    "apps.analytics",
    "apps.crops",
    "apps.community",
    "apps.dashboard",
    "apps.sensors",
    "apps.users",
    "apps.home",
    "apps.grants",
    "apps.experts",
    "apps.marketplace",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "haloai.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
            ],
        },
    },
]

WSGI_APPLICATION = "haloai.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Database Configuration
DATABASES = {
    "default": dj_database_url.parse(
        os.getenv("DATABASE_URL"),
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Project-level static files
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # For production

# Media files (user uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Firebase Configuration for IoT Data
def get_env_variable(var_name, default=None):
    try:
        return os.environ.get(var_name, default)
    except KeyError:
        if default is None:
            error_msg = f"Set the {var_name} environment variable"
            raise ImproperlyConfigured(error_msg)
        return default


# Initialize Firebase for IoT sensor data
FIREBASE_DATABASE_URL = get_env_variable("FIREBASE_DATABASE_URL")
FIREBASE_PROJECT_ID = get_env_variable("FIREBASE_PROJECT_ID")
FIREBASE_SERVICE_ACCOUNT_KEY = get_env_variable("FIREBASE_SERVICE_ACCOUNT_KEY")

# Initialize Firebase Admin SDK
if FIREBASE_DATABASE_URL:
    try:
        if not firebase_admin._apps:
            # Try to use service account key file for production
            if FIREBASE_SERVICE_ACCOUNT_KEY and os.path.exists(
                FIREBASE_SERVICE_ACCOUNT_KEY
            ):
                cred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)
                firebase_admin.initialize_app(
                    cred,
                    {
                        "databaseURL": FIREBASE_DATABASE_URL,
                        "projectId": FIREBASE_PROJECT_ID,
                    },
                )
                print("‚úÖ Firebase initialized with service account credentials")
                print(f"üì° Database URL: {FIREBASE_DATABASE_URL}")
                print(f"üÜî Project ID: {FIREBASE_PROJECT_ID}")
                print("üî• Firestore client available for user profiles")
            else:
                # Use service account from project root
                service_account_path = BASE_DIR.parent / "firebase-service-account.json"
                if service_account_path.exists():
                    cred = credentials.Certificate(str(service_account_path))
                    firebase_admin.initialize_app(
                        cred,
                        {
                            "databaseURL": FIREBASE_DATABASE_URL,
                            "projectId": FIREBASE_PROJECT_ID,
                        },
                    )
                    print("‚úÖ Firebase initialized with local service account")
                    print(f"üì° Database URL: {FIREBASE_DATABASE_URL}")
                    print(f"üÜî Project ID: {FIREBASE_PROJECT_ID}")
                    print("üî• Firestore client available for user profiles")
                else:
                    # Development mode: use database URL only (requires minimal permissions)
                    firebase_admin.initialize_app(
                        options={
                            "databaseURL": FIREBASE_DATABASE_URL,
                            "projectId": FIREBASE_PROJECT_ID,
                        }
                    )
                    print(
                        "‚ö†Ô∏è Firebase initialized in development mode (limited functionality)"
                    )
                    print(
                        "üí° For full functionality, set FIREBASE_SERVICE_ACCOUNT_KEY in .env"
                    )
    except Exception as e:
        print(f"‚ùå Firebase initialization failed: {e}")
        print("üîÑ Application will fall back to mock service for IoT data")
        print("üìñ Check FIREBASE_SETUP.md for configuration help")
else:
    print("‚ö†Ô∏è FIREBASE_DATABASE_URL not set in environment variables")
    print("üîÑ Application will use mock service for IoT data")
    print("üìñ Check FIREBASE_SETUP.md for configuration help")

# Custom User Model
AUTH_USER_MODEL = "users.CustomUser"

# Authentication settings
LOGIN_URL = "/auth/login/"
# LOGIN_REDIRECT_URL is handled by custom role-based logic in login view
# LOGIN_REDIRECT_URL = "/dashboard/farmer/"  # Commented out to allow role-based redirects
LOGOUT_REDIRECT_URL = "/"

# Session settings
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
