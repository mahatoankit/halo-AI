# Generated by Django 5.2.3 on 2025-06-25 22:23

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sensors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CropType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=100)),
                ('optimal_conditions', models.JSONField(default=dict, help_text='Optimal growing conditions as JSON')),
                ('regional_success_rate', models.FloatField(default=0.0, help_text='Historical success rate in region')),
                ('growing_season', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CropPredictionRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nitrogen', models.FloatField(help_text='N value')),
                ('phosphorus', models.FloatField(help_text='P value')),
                ('potassium', models.FloatField(help_text='K value')),
                ('temperature', models.FloatField(help_text='Temperature in Celsius')),
                ('humidity', models.FloatField(help_text='Humidity percentage')),
                ('ph', models.FloatField(help_text='Soil pH level')),
                ('rainfall', models.FloatField(help_text='Rainfall in mm')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('predicted_crops', models.JSONField(default=list, help_text='List of predicted crops with confidence scores')),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('community_admin', models.ForeignKey(limit_choices_to={'role': 'community_admin'}, on_delete=django.db.models.deletion.CASCADE, related_name='crop_predictions', to=settings.AUTH_USER_MODEL)),
                ('sensor_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crop_predictions', to='sensors.iotsensorset')),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='CropRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('primary', 'Primary Recommendation'), ('secondary', 'Secondary Option'), ('alternative', 'Alternative Choice')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence score 0-1')),
                ('rationale', models.TextField(help_text='Why this crop is recommended')),
                ('expected_yield', models.CharField(blank=True, max_length=100)),
                ('risk_factors', models.JSONField(default=list, help_text='Potential risks for this crop')),
                ('local_market_demand', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prediction_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='crops.croppredictionrequest')),
                ('crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crops.croptype')),
            ],
            options={
                'ordering': ['-confidence_score'],
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(default='Bhairahawa-Butwal', max_length=100)),
                ('date', models.DateField()),
                ('temperature_max', models.FloatField()),
                ('temperature_min', models.FloatField()),
                ('humidity', models.FloatField()),
                ('rainfall', models.FloatField(default=0.0)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('source_api', models.CharField(default='OpenWeatherMap', max_length=50)),
                ('api_response', models.JSONField(blank=True, help_text='Raw API response', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('region', 'date', 'source_api')},
            },
        ),
        migrations.AddIndex(
            model_name='croppredictionrequest',
            index=models.Index(fields=['community_admin', '-requested_at'], name='crops_cropp_communi_e6832f_idx'),
        ),
        migrations.AddIndex(
            model_name='croppredictionrequest',
            index=models.Index(fields=['sensor_set', '-requested_at'], name='crops_cropp_sensor__0993a8_idx'),
        ),
        migrations.AddIndex(
            model_name='croppredictionrequest',
            index=models.Index(fields=['status'], name='crops_cropp_status_69e527_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='croprecommendation',
            unique_together={('prediction_request', 'crop_type')},
        ),
    ]
