# Generated by Django 5.2.3 on 2025-06-25 22:23

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTSensorSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Sensor set identifier', max_length=100)),
                ('location_name', models.CharField(help_text='Human-readable location', max_length=200)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('region', models.CharField(default='Bhairahawa-Butwal', max_length=100)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('error', 'Error/Malfunction')], default='active', max_length=20)),
                ('firebase_path', models.CharField(help_text='Firebase database path', max_length=200, unique=True)),
                ('default_nitrogen', models.FloatField(default=85.0, help_text='Default N value for region')),
                ('default_phosphorus', models.FloatField(default=50.0, help_text='Default P value for region')),
                ('default_potassium', models.FloatField(default=40.0, help_text='Default K value for region')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community_admin', models.ForeignKey(limit_choices_to={'role': 'community_admin'}, on_delete=django.db.models.deletion.CASCADE, related_name='managed_sensors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IoT Sensor Set',
                'verbose_name_plural': 'IoT Sensor Sets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(choices=[('temperature', 'Temperature'), ('humidity', 'Humidity'), ('ph', 'pH Level'), ('soil_moisture', 'Soil Moisture'), ('light', 'Light Intensity')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(default='', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('firebase_timestamp', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_score', models.FloatField(default=1.0, help_text='Data quality indicator (0-1)')),
                ('sensor_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='sensors.iotsensorset')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['sensor_set', 'sensor_type', '-timestamp'], name='sensors_sen_sensor__e0d698_idx'), models.Index(fields=['timestamp'], name='sensors_sen_timesta_8162d3_idx')],
            },
        ),
    ]
