# Generated by Django 5.2.3 on 2025-06-26 01:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sensors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='iotsensorset',
            options={'ordering': ['-created_at'], 'verbose_name': 'IoT Sensor Set (Legacy)', 'verbose_name_plural': 'IoT Sensor Sets (Legacy)'},
        ),
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='Unique device identifier', max_length=100, unique=True)),
                ('name', models.CharField(help_text='Human-readable device name', max_length=200)),
                ('device_type', models.CharField(choices=[('soil_sensor', 'Soil NPK Sensor'), ('weather_station', 'Weather Station'), ('ph_meter', 'pH Meter'), ('moisture_sensor', 'Soil Moisture Sensor'), ('temperature_sensor', 'Temperature Sensor'), ('humidity_sensor', 'Humidity Sensor'), ('light_sensor', 'Light Intensity Sensor'), ('multi_sensor', 'Multi-parameter Sensor')], max_length=50)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('model_number', models.CharField(blank=True, max_length=100, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50, null=True)),
                ('location_name', models.CharField(help_text='Human-readable location', max_length=200)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('elevation', models.DecimalField(blank=True, decimal_places=2, help_text='Elevation in meters above sea level', max_digits=8, null=True)),
                ('region', models.CharField(help_text='Administrative region', max_length=100)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('municipality', models.CharField(blank=True, max_length=100, null=True)),
                ('ward_number', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('error', 'Error/Malfunction'), ('offline', 'Offline')], default='active', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False, help_text='Whether data is publicly accessible')),
                ('technical_specs', models.JSONField(blank=True, default=dict, help_text='Technical specifications and configuration')),
                ('installation_date', models.DateTimeField(blank=True, null=True)),
                ('last_maintenance', models.DateTimeField(blank=True, null=True)),
                ('next_maintenance', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(help_text='User responsible for this device', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IoT Device',
                'verbose_name_plural': 'IoT Devices',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('group_type', models.CharField(choices=[('farm', 'Farm'), ('field', 'Field'), ('greenhouse', 'Greenhouse'), ('research', 'Research Site'), ('demo', 'Demo Site')], max_length=50)),
                ('location_name', models.CharField(blank=True, max_length=200, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=11, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('members', models.ManyToManyField(blank=True, related_name='device_groups', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_device_groups', to=settings.AUTH_USER_MODEL)),
                ('devices', models.ManyToManyField(blank=True, related_name='device_groups', to='sensors.iotdevice')),
            ],
            options={
                'verbose_name': 'Device Group',
                'verbose_name_plural': 'Device Groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('reading_time', models.DateTimeField(blank=True, help_text='Actual time when reading was taken (if different from upload time)', null=True)),
                ('nitrogen', models.FloatField(blank=True, help_text='Nitrogen content (ppm)', null=True)),
                ('phosphorus', models.FloatField(blank=True, help_text='Phosphorus content (ppm)', null=True)),
                ('potassium', models.FloatField(blank=True, help_text='Potassium content (ppm)', null=True)),
                ('temperature', models.FloatField(blank=True, help_text='Temperature (Â°C)', null=True)),
                ('humidity', models.FloatField(blank=True, help_text='Relative humidity (%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ph', models.FloatField(blank=True, help_text='pH level', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('soil_moisture', models.FloatField(blank=True, help_text='Soil moisture content (%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('light_intensity', models.FloatField(blank=True, help_text='Light intensity (lux)', null=True)),
                ('rainfall', models.FloatField(blank=True, help_text='Rainfall (mm)', null=True)),
                ('wind_speed', models.FloatField(blank=True, help_text='Wind speed (km/h)', null=True)),
                ('barometric_pressure', models.FloatField(blank=True, help_text='Atmospheric pressure (hPa)', null=True)),
                ('data_quality', models.CharField(choices=[('excellent', 'Excellent (>95%)'), ('good', 'Good (85-95%)'), ('fair', 'Fair (70-85%)'), ('poor', 'Poor (<70%)')], default='good', max_length=20)),
                ('quality_score', models.FloatField(default=1.0, help_text='Data quality score (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('is_validated', models.BooleanField(default=False)),
                ('validation_notes', models.TextField(blank=True, null=True)),
                ('raw_data', models.JSONField(blank=True, default=dict, help_text='Raw sensor data for debugging purposes')),
                ('battery_level', models.FloatField(blank=True, help_text='Device battery level (%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('signal_strength', models.FloatField(blank=True, help_text='Signal strength (dBm)', null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_readings', to='sensors.iotdevice')),
            ],
            options={
                'verbose_name': 'Sensor Reading',
                'verbose_name_plural': 'Sensor Readings',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DataAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('threshold', 'Threshold Alert'), ('anomaly', 'Anomaly Detection'), ('device_offline', 'Device Offline'), ('low_battery', 'Low Battery'), ('data_quality', 'Data Quality Issue')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('parameter', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='active', max_length=20)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('sms_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('recipients', models.ManyToManyField(blank=True, related_name='received_alerts', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='sensors.iotdevice')),
                ('sensor_data', models.ForeignKey(blank=True, help_text='Related sensor reading that triggered the alert', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sensors.sensordata')),
            ],
            options={
                'verbose_name': 'Data Alert',
                'verbose_name_plural': 'Data Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['assigned_to', 'status'], name='sensors_iot_assigne_5538f4_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['region', 'status'], name='sensors_iot_region_4db63e_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['device_type', 'status'], name='sensors_iot_device__122f89_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['latitude', 'longitude'], name='sensors_iot_latitud_b3f387_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordata',
            index=models.Index(fields=['device', '-timestamp'], name='sensors_sen_device__64c3d5_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordata',
            index=models.Index(fields=['timestamp'], name='sensors_sen_timesta_a94ae6_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordata',
            index=models.Index(fields=['device', 'data_quality'], name='sensors_sen_device__b2da6d_idx'),
        ),
        migrations.AddIndex(
            model_name='dataalert',
            index=models.Index(fields=['device', 'status'], name='sensors_dat_device__931335_idx'),
        ),
        migrations.AddIndex(
            model_name='dataalert',
            index=models.Index(fields=['severity', 'status'], name='sensors_dat_severit_f6c025_idx'),
        ),
        migrations.AddIndex(
            model_name='dataalert',
            index=models.Index(fields=['created_at'], name='sensors_dat_created_329f46_idx'),
        ),
    ]
