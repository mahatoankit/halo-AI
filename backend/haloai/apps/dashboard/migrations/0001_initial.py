# Generated by Django 5.2.3 on 2025-06-26 07:50

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('gold', 'Gold')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='NPR', max_length=3)),
                ('monthly_predictions', models.IntegerField(help_text='Number of predictions per month')),
                ('expert_consultation', models.BooleanField(default=False)),
                ('sensor_data_access', models.BooleanField(default=False)),
                ('soil_health_reports', models.BooleanField(default=False)),
                ('weather_alerts', models.BooleanField(default=True)),
                ('billing_cycle_days', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='ExpertConsultation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consultation_type', models.CharField(choices=[('crop_selection', 'Crop Selection'), ('disease_diagnosis', 'Disease Diagnosis'), ('soil_health', 'Soil Health'), ('irrigation', 'Irrigation Management'), ('pest_control', 'Pest Control'), ('fertilizer', 'Fertilizer Recommendation'), ('general', 'General Farming')], max_length=30)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('is_urgent', models.BooleanField(default=False)),
                ('preferred_contact_method', models.CharField(choices=[('phone', 'Phone Call'), ('whatsapp', 'WhatsApp'), ('message', 'Text Message'), ('in_person', 'In Person Visit')], default='phone', max_length=20)),
                ('expert_response', models.TextField(blank=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('images', models.JSONField(default=list, help_text='List of image URLs for crop/field photos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expert', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['community_admin', 'technician']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_consultations', to=settings.AUTH_USER_MODEL)),
                ('farmer', models.ForeignKey(limit_choices_to={'role': 'farmer'}, on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FarmerFieldProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('local_unit', models.CharField(blank=True, max_length=100)),
                ('total_area', models.DecimalField(decimal_places=2, help_text='Total farm area in acres', max_digits=8)),
                ('soil_type', models.CharField(blank=True, max_length=100)),
                ('irrigation_type', models.CharField(choices=[('rain_fed', 'Rain Fed'), ('canal', 'Canal Irrigation'), ('tubewell', 'Tubewell'), ('drip', 'Drip Irrigation'), ('sprinkler', 'Sprinkler'), ('mixed', 'Mixed')], default='rain_fed', max_length=50)),
                ('primary_crops', models.TextField(help_text='Main crops typically grown')),
                ('secondary_crops', models.TextField(blank=True, help_text='Secondary/rotation crops')),
                ('organic_farming', models.BooleanField(default=False)),
                ('experience_years', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer', models.OneToOneField(limit_choices_to={'role': 'farmer'}, on_delete=django.db.models.deletion.CASCADE, related_name='field_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FarmerSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('predictions_used', models.IntegerField(default=0)),
                ('last_reset_date', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community_admin', models.ForeignKey(limit_choices_to={'role': 'community_admin'}, on_delete=django.db.models.deletion.CASCADE, related_name='managed_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('farmer', models.OneToOneField(limit_choices_to={'role': 'farmer'}, on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='ManualCropInput',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nitrogen', models.FloatField(help_text='N value (0-140)')),
                ('phosphorus', models.FloatField(help_text='P value (5-145)')),
                ('potassium', models.FloatField(help_text='K value (5-205)')),
                ('ph', models.FloatField(help_text='Soil pH level (3.5-10)')),
                ('temperature', models.FloatField(help_text='Temperature in Celsius')),
                ('humidity', models.FloatField(help_text='Humidity percentage')),
                ('rainfall', models.FloatField(help_text='Rainfall in mm')),
                ('field_area', models.DecimalField(blank=True, decimal_places=2, help_text='Field area in acres', max_digits=8, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the field')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('farmer', models.ForeignKey(limit_choices_to={'role': 'farmer'}, on_delete=django.db.models.deletion.CASCADE, related_name='manual_inputs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='NPR', max_length=3)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('esewa', 'eSewa'), ('khalti', 'Khalti'), ('bank_transfer', 'Bank Transfer'), ('mobile_banking', 'Mobile Banking')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_gateway_response', models.JSONField(blank=True, null=True)),
                ('payment_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='dashboard.farmersubscription')),
            ],
            options={
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='SoilHealthReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('lab_test', 'Laboratory Test'), ('field_test', 'Field Test Kit'), ('sensor_data', 'IoT Sensor Data'), ('manual_upload', 'Manual Upload')], max_length=20)),
                ('test_date', models.DateField()),
                ('lab_name', models.CharField(blank=True, max_length=200)),
                ('nitrogen', models.FloatField(blank=True, null=True)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('organic_matter', models.FloatField(blank=True, help_text='Percentage', null=True)),
                ('electrical_conductivity', models.FloatField(blank=True, null=True)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('copper', models.FloatField(blank=True, null=True)),
                ('report_file', models.FileField(blank=True, help_text='PDF or image of the soil report', null=True, upload_to='soil_reports/')),
                ('health_score', models.FloatField(blank=True, help_text='Overall soil health score (0-100)', null=True)),
                ('recommendations', models.TextField(blank=True)),
                ('deficiencies', models.JSONField(default=list, help_text='List of nutrient deficiencies')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer', models.ForeignKey(limit_choices_to={'role': 'farmer'}, on_delete=django.db.models.deletion.CASCADE, related_name='soil_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-test_date'],
            },
        ),
    ]
